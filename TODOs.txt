# Refactoring run with logging in focus.
#  Use https://fangpenlin.com/posts/2012/08/26/good-logging-practice-in-python/ as basis.

# Check if admin rights are required for a collector. If so and user is not -> Logging

# FileMetadata: Implement interpreter for "filetype and permissions (st_mode)"
# https://man7.org/linux/man-pages/man7/inode.7.html

# Implement SQLite Storage for protocol and collected data/files

# Adress issues on the platform "Windows", at first the issue regarding the paths which.

# Add a dependencies.txt file for every platform. (Mac, Linux, Windows)

# Add target directory parameter for mosk to define where logfiles and collected items
# needs to be stored

# Add content collection limit parameter for mosk, with which the size can be controlled
# which limits if the content of file will be stored inside the collection log itself. (Collector FileContent)

# Add SHA1 collection in addition to MD5 collection.

# Add parameter, for very quick collection (for example, no hash calculation, etc.)

# Evaluate python imagemounter to mount image for collecting data from images - imount
# https://imagemounter.readthedocs.io/en/latest/python.html

# Use print function of macOS to print PDF exports of things like calendars, etc.

# Collector to execute a generic command and collect the output (for example the "find" command)

# Preperations for portable usage (copy of bins, "compiled" version of tool, etc.)

# Collector to search in log files (for example for the string "Starting automatic backup",
#  https://eclecticlight.co/2021/03/17/time-machine-to-apfs-backing-up/)

# Implement a class to collect all FritzBox event logs and filter for certain signal words

# Add a database with MD5 hashes for systemfiles of macOS
#  see: https://eclecticlight.co/2021/03/02/what-has-changed-in-macos-and-why-it-matters/

# There is a bug somewhere in the EWFImage class or lower in the pytsk3 module. There are some files in the test
#  image which will be separadet from their path when creating the overview csv file
#  in FolerInfo.get_folder_items_in_csv_format()
#  Example: '2,./tests/EWFDemoFAT32.e01/2/02 Sig/Microsoft Windows Vista & Office 2007 Forensics, Office 2007 File Format.pptx'

# Get module pyewf up and running on windows

# enable wildcards for localhost.file.FileCopy.
#  in File names (for example: /someDir/some*ile, ...)
#  in folders (for example: /SomeDir/*/anotherDir/files or /someDir*/files, ...)

# add optional parameter 'destination path' to localhost.file.FileCopy.

# Refactor artefact.localhost.file.FileMetadata, it uses external command 'xattr'

# If possible, refactor artefact.localhost.osinformation.SudoVersion, it uses external command 'sudo'

# Refactor collectors in artefact.localhost.system. They all use external commands.

# Refactoring: Move PLUtil to another class and/or module.

# Check if it is even possible to run your own copies of plutil or mdfind without the host os hindering you from
# doing so. Have seen, that my older copy of "mdfind" or "plutil" was finised from the shell with the output
# "zsh: killed", which suggests, that the os is protecting itself from "mailicous" applications, disguising them
# as legit tools.

# Create a ToolClass analog to the FileClass, to implement checksum validation of external tools once for all.