"""mosk artefact base class module"""__version__ = '0.0.3'__author__ = '3Peso'__all__ = ['ArtefactBase']import loggingfrom datetime import datetimefrom abc import abstractmethodfrom collections import UserDictfrom baseclasses.source import SourceBasefrom baseclasses.protocol import ProtocolBasefrom businesslogic.placeholders import Placeholderfrom businesslogic.data import CollectionDataclass ArtefactBase:    """    Base class for all artefact collection classes.    """    _logger = logging.getLogger(__name__)    def __init__(self, parent: SourceBase, parameters, *args, **kwargs):        self._parent = SourceBase(parent, parameters)        self._parameters = parameters        self._collecteddata = []        self._protocol = None        self._title = None        self._collectionmethod = None        self._description = None        ArtefactBase.cache_parameters(self._parameters)    def getdocumentation(self) -> str:        try:            # Example            # Title: CurrentUser            # Description: Collects the current user name on the local host.            # Collection Method: getpass.getuser()            documentation = "Title: {}\nDescription: {}\nCollection Method: {}".format(self._title,                                                                                       self._description,                                                                                       self._collectionmethod)        except TypeError:            documentation = ""        return documentation    def __call__(self):        return self.collect()    @classmethod    def cache_parameters(cls, attributes: UserDict):        """Cache placeholder values for later usage in following commands."""        for attributename in attributes.keys():            attributevalue = Placeholder.replace_placeholders(attributes[attributename])            Placeholder.update_placeholder(attributename, attributevalue)            ArtefactBase._logger.debug("Artefact: Cached artefact parameter '{}'. Parameter value: '{}'".                                       format(attributename, attributevalue))    def __str__(self):        if self.data is None:            ArtefactBase._logger.warning("ArtefactBase: Collected data of '{}' is None".format(self._title))        else:            ArtefactBase._logger.debug(                "ArtefactBase: Collected data of '{}' converted to string in ArtefactBase.__str__".                format(self._title))            data_as_string = ''            if hasattr(self.data, '__iter__'):                for dataobj in self.data:                    data_as_string += "{}\r\n".format(str(dataobj))            else:                data_as_string = str(self.data)        return data_as_string    @abstractmethod    def collect(self) -> dict:        pass    @property    def protocol(self):        return self._protocol    @protocol.setter    def protocol(self, newprotocol: ProtocolBase):        self._protocol = newprotocol    @property    def data(self):        return self._collecteddata    @data.setter    def data(self, value, overwrite=False):        if overwrite:            self._collecteddata = value        else:            self._collecteddata.append(CollectionData(data=value, currentdatetime=datetime.now()))    @Placeholder    def get_parameter(self, parameter):        parametervalue = self._parameters[parameter]        self._logger.debug("Retrieved parameter '{}': '{}'".format(parameter, parametervalue))        return parametervalue