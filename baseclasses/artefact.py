import loggingfrom abc import abstractmethodfrom collections import UserDictfrom baseclasses.source import SourceBasefrom baseclasses.protocol import ProtocolBasefrom businesslogic.placeholders import Placeholderclass ArtefactBase:    _logger = logging.getLogger(__name__)    def __init__(self, parent: SourceBase, parameters, *args, **kwargs):        self._parent = SourceBase(parent, parameters)        self._parameters = dict(parameters)        self._collecteddata = None        self._protocol = None        ArtefactBase.cache_parameters(UserDict(self._parameters))    def getdocumentation(self) -> str:        # Example        # Title: CurrentUser        # Description: Collects the current user name on the local host.        # Collection Method: getpass.getuser()        documentation = "Title: {}\nDescription: {}\nCollection Method: {}".format(self.title(),                                                                                   self.description(),                                                                                   self.collectionmethod())        return documentation    def __call__(self):        return self.collect()    @classmethod    def cache_parameters(cls, attributes: UserDict):        for attributename in attributes.keys():            attributevalue = Placeholder.replace_placeholders(attributes[attributename].nodeValue)            Placeholder.update_placeholder(attributename, attributevalue)            ArtefactBase._logger.debug("Artefact: Cached artefact parameter '{}'. Parameter value: '{}'".                                       format(attributename, attributevalue))    def __str__(self):        if self.data is None:            ArtefactBase._logger.warning("ArtefactBase: Collected data of '{}' is None".format(self.title))        else:            ArtefactBase._logger.debug(                "ArtefactBase: Collected data of '{}' converted to string in ArtefactBase.__str__".                format(self.title))        return self.data    @abstractmethod    def collect(self) -> dict:        pass    @property    @abstractmethod    def title(self):        pass    @property    @abstractmethod    def collectionmethod(self):        pass    @property    @abstractmethod    def description(self):        pass    @property    def protocol(self):        return self._protocol    @protocol.setter    def protocol(self, newprotocol: ProtocolBase):        self._protocol = newprotocol    @property    def data(self):        return self._collecteddata