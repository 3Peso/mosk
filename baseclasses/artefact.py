from abc import ABCMeta, abstractmethodfrom collections import UserDictfrom baseclasses.source import Sourcefrom baseclasses.protocol import ProtocolBasefrom businesslogic.placeholders import PlaceholderReplacerfrom businesslogic.log import mosk_loggerclass Artefact(metaclass=ABCMeta):    @classmethod    def __subclasshook__(cls, subclass):        return (hasattr(subclass, 'collect') and                callable(subclass.collect) and                hasattr(subclass, 'getdocumentation') and                callable(subclass.getdocumentation) and                hasattr(subclass, 'gettitle') and                callable(subclass.gettitle) and                hasattr(subclass, 'getcollectionmethod') and                callable(subclass.getcollectionmethod) and                hasattr(subclass, 'getdescription') and                callable(subclass.getdescription) and                hasattr(subclass, 'cache_parameters') and                callable(subclass.cache_parameters))    def __init__(self, *args, **kwargs):        returnclass ArtefactBase(Artefact):    def __init__(self, parent: Source, parameters, *args, **kwargs):        Artefact.__init__(self, *args, **kwargs)        self._parent = parent        self._parameters = parameters        self._collecteddata = None        self._protocol = None        ArtefactBase.cache_parameters(self._parameters)    def getdocumentation(self) -> str:        # Example        # Title: CurrentUser        # Description: Collects the current user name on the local host.        # Collection Method: getpass.getuser()        documentation = "Title: {}\nDescription: {}\nCollection Method: {}".format(self.gettitle(),                                                                                   self.getdescription(),                                                                                   self.getcollectionmethod())        return documentation    def __call__(self):        return self.collect()    @staticmethod    def cache_parameters(attributes: UserDict):        for attributename in attributes.keys():            attributevalue = PlaceholderReplacer.replace_placeholders(attributes[attributename].nodeValue)            PlaceholderReplacer.update_placeholder(attributename, attributevalue)            mosk_logger.debug("Artefact: Cached artefact parameter '{}'. Parameter value: '{}'".format(attributename,                                                                                                       attributevalue))    def __str__(self):        return self._collecteddata    @abstractmethod    def collect(self) -> dict:        pass    @abstractmethod    def gettitle(self) -> str:        pass    @abstractmethod    def getcollectionmethod(self) -> str:        pass    @abstractmethod    def getdescription(self) -> str:        pass    @property    def protocol(self):        return self._protocol    @protocol.setter    def protocol(self, newprotocol: ProtocolBase):        self._protocol = newprotocol    @property    def data(self):        return self._collecteddata