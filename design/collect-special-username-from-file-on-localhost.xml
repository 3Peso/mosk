<LocalHost> <!-- Das hier ist eine Quelle, für das Kind -->
    <File path="jadajada" collect="True"> <!-- Das hier ist eine Quelle für das Kind und ein Artefakt für den Elter-Knoten -->
        <AllUsernames> <!-- Das hier ist eine Quelle für das Kind und ein Artefakt für den Elter-Konten -->
            <User name="john*" collect="True" /> <!-- Das hier ist ein Artefakt -->
        </AllUsernames>
    </File>
</LocalHost>

<!--
 -> Parsen des Baums von Oben nach unten.
 -> Der Dokument-Knoten ist immer eine Quelle.
 -> Gibt es nur Quellen, dann werden von der letzten Quelle autmoatisch alle bekannten Artefakte abgerufen.
 -> Ein Element, dass kein Dokumentknoten ist und Kindelemente hat ist ein Artefakt für den Elter-Knoten und
    Quelle für alle Kind-Knoten.
 -> Ein ELement, dass das Attribut "collect" besitzt ist ein Artefakt.
 -> Wenn eine Quelle als Quelle für Artefakte verwendet wird, die selber Quelle sein können,
    dann muss diese übergeordnete Quelle namentlich als mögliches Artefakt in den untergeordneten
    Quellen auftauchen.
        Beispiel: "AllUsernames" als Quelle für "LocalHost" und "File". Hier muss in der Liste der
        Artefakte für die Quellen "LocalHost" und "File" auch "AllUsernames" auftauchen. Wenn nicht,
        führt das zu einem Laufzeitfehler.
 -> Ein Kindelement nutzt das Elter-Element als Quelle, falls eine Quelle notwendig ist.
 -> Eine Quelle liefert sowohl die Daten als auch notwendige Aufrufparameter für das Kindelement/Artefakt,
    sofern das Artefakt diese Parameter noch nicht kennt.

 -> Ein Artefakt kann eine Quelle sein muss aber nicht.
 -> Ein Artefakt, dass keine Quelle ist, hat keine Liste von möglichen Artefakten.
 -> Ein Artefakt wird von einer Factory-Method erzeugt.
 -> Jede Quelle hat eine Liste von möglichen/implementierten Artefakten.
 -> Ein Artefakt liefert seine Collect-Ergebnisse direkt zurück an den Aufrufer.
 -> Der Aufrufer gibt das Ergebnis weiter nach oben, wenn nicht weitere Kinder/Artefakte das Ergebnis
    des vorherigen Aufrufs als Quelle benötigen.
        Beispiel: AllUsernames -> LocalHost -> User
        Der LocalHost ruft sein Artefakt "AllUsernames" auf und gibt das Ergbnis weiter an "User".
        Das ist nur erlaubt, wenn "AllUsernames" "User" als Artefakt kennt.
        "User" filtert das Ergebnis.
        Da "User" das letzte Element im Baum ist, ist das das Endergebnis.
 -? Ein Artefakt ruft bei fehlenden Parametern eine Methode auf, die bei Erzeugung mitgeliefert wird.
 -? Collect-Ergebnisse werden hierarchisch gesammelt von einer übergeordneten Instanz.

Wie werden die Ergebnisse dokumentiert für die Auftragsarbeit?
 -> Die Daten eines jeden Artefakts müssen eine erkennbare Herkunft haben.
 -> Die Herkunft spiegelt ein Aufrufpfad wieder.
 -> Vor Beginn der Datensammlung muss dokumentiert/mitgeliefert werden:
    -> Der Auftragnehmer
    -> Die Auftragsnummer
    -> Das Startdatum
 -> Jedes aufgerufene Artefakt muss dokumentieren, welche Module/APIs/Bibliotheken es nutzt
    (mit Versionsnummern) um an die Daten zu kommen.
 -> Jede Quelle, die einen eigenen Pfad besitzt gibt diesen an das Kindelement/Artefakt weiter.
 -> Hat eine Quelle keinen eigenen Pfad, handelt es sich um die Artefakt, dass auch Quelle sein kann.
    In diesem Fall gibt die Quelle den Pfad des Elter-Elements/Elter-Quelle an das Kindelement/Artefakt
    weiter.
 -> Zur Dokumentation der Herkunft wird der Pfad der Elter-Quelle verwendet.

 -> __repr__ für Artefakt und Quelle sollte implementiert werden.
 -> __str__ für Artefakt und Quelle sollte implementiert werden.
 -> Dunder-Method "__call__" für Collect?
 -> Dunder-Methods "__enter__" und "__exit__" interessant für Eintritt und Verlassen eines Artefakts?

 Aufrufen:
 data = mosk.get_source('host', address, ...).get_artefact('AllUsernames').collect()
 data = mosk.get_source('AllUsernames').get_source('host', 'localhost').collect()
 data = mosk.get_source('host', 'localhost').collect()
 # Beim Aufruf von collect() werden Daten zurückgegeben.
 data = mosk.get_source('file', address).get_artefact('host', 'localhost').get_artefact('User', '*john').collect()
 data = mosk.get_source('file', address).get_source('host', 'localhost').get_artefact('User', '*john').collect()

 -> Die Factory für Artefacts ist eine Source.
 -> Die Factory für eine Source ist übergeordnet.
    -> Möglicherweise ein 'mosk'-Objekt
    -> Möglicherweise eine "globale" Methode
-->