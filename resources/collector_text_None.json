{
  "artefact.localhost.mac.file.ShellHistoryOffAllUsers": {
    "title" : "ShellHistoryOffAllUsers",
    "collectionmethod": "os.file",
    "description": "Retrieves all user folers and tries to find bash shell and zhs shell history files and\r\n then tries to store their content.\r\n IMPORTANT: None-Unicode-Characters wont be stored."
  },
  "artefact.localhost.mac.system.NVRAMCollector": {
    "title": "NVRAMCollector",
    "collectionmethod": "nvram -p",
    "description": "Collects the contents of the NVRAM by calling the bash command \"nvram\""
  },
  "artefact.localhost.user.CurrentUser": {
    "title": "CurrentUser",
    "collectionmethod": "getpass.getuser",
    "description": "Collects the current user with the Python module getpass."
  },
  "artefact.localhost.file.FileExistence": {
    "title": "FileExsistence",
    "collectionmethod": "os.path.exists",
    "description": "Find a file by file name including the path or parts of the path."
  },
  "artefact.localhost.file.FileContent": {
    "title": "FileContent",
    "collectionmethod": "Python File Contextmanager",
    "description": "Uses the python file context manager to open the file in read mode and store its\r\ncontent and MD5 hash of its content."
  },
  "artefact.localhost.mac.system.LocalTime": {
    "title": "LocalTime",
    "collectionmethod": "zdump /etc/localtime",
    "description": "Collects the local date and time by reading the contents of\r\n '/etc/localtime' with zdump."
  },
  "artefact.localhost.osinformation.OSPlatform": {
    "title": "OSPlatform",
    "collectionmethod": "platform.system",
    "description": "Collects the platform name on which this script is running on (Windows, Linux, Darwin which is Mac)."
  },
  "artefact.localhost.machineinformation.MachineName": {
    "title": "MachineName",
    "collectionmethod": "socket.gethostname",
    "description": "Collects the machine name of the local host with the Python module socket."
  },
  "artefact.localhost.osinformation.OSName": {
    "title": "OSName",
    "collectionmethod": "platform.mac_ver plus lookup table",
    "description": "Collects the macOS version and checks it against an internal lookup table to get OS Name."
  },
  "artefact.localhost.osinformation.OSVersion": {
    "title": "OSVersion",
    "collectionmethod": "platform.mac_ver",
    "description": "Collects the running macOS version."
  },
  "artefact.localhost.osinformation.OSTimezone": {
    "title": "OSTimezone",
    "collectionmethod": "datetime.now",
    "description": "Collects the currently configured timezone on localhost."
  },
  "artefact.localhost.osinformation.SudoVersion": {
    "title": "SudoVersion",
    "collectionmethod": "sudo -V in Shell",
    "description": "Collects the currently installed sudo version."
  },
  "artefact.localhost.user.AllUsernames": {
    "title": "AllUsernames",
    "collectionmethod": "pwd.getpwall",
    "description": "Collects all usernames with the Python module pwd."
  },
  "artefact.network.internet.TemperatureFromOpenWeatherDotCom": {
    "title": "Current temperature from openweather.com",
    "collectionmethod": "Get data from returend json object.",
    "description": "Calling the API of the webside with free developer api key."
  },
  "artefact.network.internet.ExternalLinksOnUrl": {
    "title": "External Links on Web Page",
    "collectionmethod": "Web Scrapping",
    "description": "Scraps all external urls on a given web page with BeautifulSoup."
  },
  "artefact.network.router.HostsRegisteredInFritzBox": {
    "title": "HostsRegisteredInFritzBox",
    "collectionmethod":"fritzcollection.lib.hosts",
    "description": "Uses to Open Source Python module 'fritzconnection' by Klaus Bremer\r\nto collect the status of all registered hosts in a FritzBox network."
  },
  "artefact.network.system.TimeFromNTPServer": {
    "title": "TimeFromNTPServer",
    "collectionmethod": "Network call using socket connect.",
    "description": "Retrieves the time from a time server. Can be used as reference time.\r\nRequires network connection."
  },
  "artefact.localhost.system.DetectFusionDrive": {
    "title": "DetectFusionDrive",
    "collectionmethod": "diskutil list",
    "description": "Runs 'diskutil list' and tries to find the string 'Fusion' in the result."
  },
  "artefact.localhost.system.DetectFileByName": {
    "title": "DetectFileByName",
    "collectionmethod": "mdfind kMDItemFSName='FileName' or mdfind kMDItemDisplayName == 'FileNameWithWildcards'",
    "description": "Uses 'mdfind' to try to find a file identified with its full name,\r\nwhich is the name and the extension."
  },
  "artefact.localhost.system.InstalledApplications": {
    "title": "InstalledApplications",
    "collectionmethod": "system_profiler",
    "description": "Collects all installed applications."
  },
  "artefact.localhost.system.FileSystemInformation": {
    "title": "FileSystemInformation",
    "collectionmethod": "diskutil",
    "description": "Collects information about the connected drives and volumes."
  },
  "artefact.localhost.system.DetectFileVault": {
    "title": "DetectFileVault",
    "collectionmethod": "diskutil",
    "description": "Runs 'diskutil apfs list' and tries to find string identifying the status of FileVault."
  },
  "artefact.localhost.system.HardwareInforamtion": {
    "title": "HardwareInformation",
    "collectionmethod": "system_profiler SPHardwareDataType",
    "description": "Collects basic hardware information like serial number and model."
  },
  "artefact.image.file.FolderInformation": {
    "title": "FolderInformation",
    "collectionmethod": "pyewf and pytsk3",
    "description": "Tries to load the information of a given folder from an image file.\r\nInfo contains files and folders of a given folder, and their basic attributes like size, and creation date."
  },
  "artefact.image.system.ImageMetadata": {
    "title": "ImageMetadata",
    "collectionmethod": "pyewf and pytsk3",
    "description": "Tries to load the metadata image information from a given ewf file.\r\nThe image size must not be the same as the size of the image file due to compression."
  },
  "artefact.image.system.PartitionTable": {
    "title": "PartitionTable",
    "collectionmethod": "pyewf and pytsk3",
    "description": "Tries to read the partition table of an image from a given ewf file."
  },
  "artefact.image.file.File": {
    "title": "File",
    "collectionmethod": "pyewf and pytsk3",
    "description": "Tries to extract a file from an image from a given ewf file."
  },
  "artefact.image.file.CompleteFileSystemInfo": {
    "title": "CompleteFileSystemInfo",
    "collectionmethod": "pyewf and pytsk3",
    "description": "Exports information about all files and folders in an image into a csv file."
  },
  "artefact.support.debug.DebugPlaceholder": {
    "title": "DebugPlaceholder",
    "collectionmethod": "Internal method",
    "description": "Collector used to debug placeholder functionality. For internal / development use."
  },
  "artefact.localhost.file.FileCopy": {
    "title": "FileCopy",
    "collectionmethod": "Copy file with shutil.copyfile",
    "description": "Collector tries to create a copy of the file."
  },
  "artefact.localhost.file.FileMetadata": {
    "title": "FileMetadata",
    "collectionmethod": "Copies collects metadata of a file by using Python standard modules 'os.path'",
    "description": "Collector to collect the create date, modiefied date, and accessed date of a file, birth datetime,\n used blocks, block size, inode number, owner id, group id, filetype and permissions.\n"
  },
  "artefact.localhost.file.FileHash": {
    "title": "FileHash",
    "collectionmethod": "Uses library method businesslogic.support.md5 to calculate the MD5 has of a provided file.",
    "description": "Calcuates the MD5 hash of a provided file and compares it against a provided MD5 hash."
  },
  "artefact.image.file.FileHash": {
    "title": "FileHash",
    "collectionmethod": "Uses library method businesslogic.support.md5 to calculate the MD5 has of a provided file.",
    "description": "Calcuates the MD5 hash of a provided file and compares it against a provided MD5 hash."
  },
  "artefact.localhost.system.HardwareInformation": {
    "title": "HardwareInformation",
    "collectionmethod": "system_profiler",
    "description": "Uses the system_profiler cli tool to collect the hardware information."
  },
  "artefact.localhost.system.NVRAMCollector": {
    "title": "NVRAMCollector",
    "collectionmethod": "nvram -xp",
    "description": "Uses the cli tool nvram to collect the NVRAM contents."
  },
  "artefact.localhost.system.LocalTime": {
    "title": "LocalTime",
    "collectionmethod": "zdump",
    "description": "Uses cli tool zdump to extract the local time from '/etc/localtime'."
  }
}